{
  "name": "ng-annotate",
  "version": "1.2.1",
  "description": "add, remove and rebuild angularjs dependency injection annotations",
  "main": "build/es5/ng-annotate-main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/olov/ng-annotate.git"
  },
  "dependencies": {
    "acorn": "~2.6.4",
    "alter": "~0.2.0",
    "convert-source-map": "~1.1.2",
    "optimist": "~0.6.1",
    "ordered-ast-traverse": "~1.1.1",
    "simple-fmt": "~0.1.0",
    "simple-is": "~0.2.0",
    "source-map": "~0.5.3",
    "stable": "~0.1.5",
    "stringmap": "~0.2.2",
    "stringset": "~0.2.1",
    "tryor": "~0.1.2"
  },
  "devDependencies": {
    "coffee-script": "~1.10.0",
    "defs": "~1.1.1",
    "diff": "~2.2.1",
    "find-line-column": "~0.5.2"
  },
  "keywords": [
    "angular",
    "angularjs",
    "di",
    "dependency",
    "injection",
    "annotate",
    "annotation",
    "annotations",
    "transformation"
  ],
  "scripts": {
    "test": "node --harmony run-tests"
  },
  "bin": {
    "ng-annotate": "./build/es5/ng-annotate"
  },
  "author": {
    "name": "Olov Lassus",
    "email": "olov.lassus@gmail.com"
  },
  "license": "MIT",
  "readme": "# ng-annotate [![Build Status](https://travis-ci.org/olov/ng-annotate.svg?branch=master)](https://travis-ci.org/olov/ng-annotate)\nng-annotate adds and removes AngularJS dependency injection annotations.\n\nWrite your code without annotations and mark-up functions to be annotated \nwith the `\"ngInject\"` directive prologue, just like you would \n`\"use strict\"`. This must be at the beginning of your function.\n\n```js\n$ cat source.js\nangular.module(\"MyMod\").controller(\"MyCtrl\", function($scope, $timeout) {\n    \"ngInject\";\n    ...\n});\n```\n\nThen run ng-annotate as a build-step to produce this intermediary,\nannotated, result (later sent to the minifier of choice):\n\n```js\n$ ng-annotate -a source.js\nangular.module(\"MyMod\").controller(\"MyCtrl\", [\"$scope\", \"$timeout\", function($scope, $timeout) {\n    \"ngInject\";\n    ...\n}]);\n```\n\nYour minifier will most likely retain the `\"ngInject\"` prologues so use `sed`\nor a regexp in your build toolchain to get rid of those on the ng-annotate output.\n`sed` example: `ng-annotate -a source.js | sed \"s/[\\\"']ngInject[\\\"'];*//g\"`.\nJavaScript regexp example: `source.replace(/[\"']ngInject[\"'];*/g, \"\")`.\n\nYou can also use ng-annotate to rebuild or remove existing annotations.\nRebuilding is useful if you like to check-in the annotated version of your\nsource code. When refactoring, just change parameter names once and let\nng-annotate rebuild the annotations. Removing is useful if you want to\nde-annotate an existing codebase that came with checked-in annotations\n\n\n## Installation and usage\n\n```bash\nnpm install -g ng-annotate\n```\n\nThen run it as `ng-annotate OPTIONS <file>`. The errors (if any) will go to stderr,\nthe transpiled output to stdout.\n\nThe simplest usage is `ng-annotate -a infile.js > outfile.js`.\nSee [OPTIONS.md](OPTIONS.md) for command-line documentation.\n\nng-annotate can be used as a library, see [OPTIONS.md](OPTIONS.md) for its API.\n\n\n## Implicit matching of common code forms\nng-annotate uses static analysis to detect common AngularJS code patterns. When\nthis works it means that you do not need to mark-up functions with `\"ngInject\"`.\nFor a lot of code bases this works very well (use `ng-strict-di` to simplify \ndebugging when it doesn't) but for others it is less reliable and you may prefer \nto use `\"ngInject\"` instead. For more information about implicit matching see \n[IMPLICIT.md](IMPLICIT.md).\n\n\n## Explicit annotations with ngInject\nThe recommended `function foo($scope) { \"ngInject\"; ... }` can be exchanged\nfor `/*@ngInject*/ function foo($scope) { ... }` or\n`ngInject(function foo($scope) { ... })`. If you use the latter form then\nthen add `function ngInject(v) { return v }` somewhere in your codebase or process\naway the `ngInject` function call in your build step.\n\n\n### Suppressing false positives with ngNoInject\nThe `/*@ngInject*/`, `ngInject(..)` and `\"ngInject\"` siblings have three cousins that\nare used for the opposite purpose, suppressing an annotation that ng-annotate added\nincorrectly (a \"false positive\"). They are called `/*@ngNoInject*/`, `ngNoInject(..)`\nand `\"ngNoInject\"` and do exactly what you think they do.\n\n\n## ES6 and TypeScript support\nng-annotate supports ES5 as input so run it with the output from Babel, Traceur,\nTypeScript (tsc) and the likes. Use `\"ngInject\"` on functions you want annotated.\nYour transpiler should preserve directive prologues, if not please file a bug on it.\n\n\n## Highly recommended: enable ng-strict-di\n`<div ng-app=\"myApp\" ng-strict-di>`\n\nDo that in your ng-annotate processed (but not minified) builds and AngularJS will\nlet you know if there are any missing dependency injection annotations.\n[ng-strict-di](https://docs.angularjs.org/api/ng/directive/ngApp) is available in \nAngularJS 1.3 or later.\n\n\n## Tools support\n* [Grunt](http://gruntjs.com/): [grunt-ng-annotate](https://www.npmjs.org/package/grunt-ng-annotate) by [Michał Gołębiowski](https://github.com/mzgol)\n* [Browserify](http://browserify.org/): [browserify-ngannotate](https://www.npmjs.org/package/browserify-ngannotate) by [Owen Smith](https://github.com/omsmith)\n* [Brunch](http://brunch.io/): [ng-annotate-uglify-js-brunch](https://www.npmjs.org/package/ng-annotate-uglify-js-brunch) by [Kagami Hiiragi](https://github.com/Kagami)\n* [Gulp](http://gulpjs.com/): [gulp-ng-annotate](https://www.npmjs.org/package/gulp-ng-annotate/) by [Kagami Hiiragi](https://github.com/Kagami)\n* [Broccoli](https://github.com/broccolijs/broccoli): [broccoli-ng-annotate](https://www.npmjs.org/package/broccoli-ng-annotate) by [Gilad Peleg](https://github.com/pgilad)\n* [Rails asset pipeline](http://guides.rubyonrails.org/asset_pipeline.html): [ngannotate-rails](https://rubygems.org/gems/ngannotate-rails) by [Kari Ikonen](https://github.com/kikonen)\n* [Grails asset pipeline](https://github.com/bertramdev/asset-pipeline): [angular-annotate-asset-pipeline](https://github.com/craigburke/angular-annotate-asset-pipeline) by [Craig Burke](https://github.com/craigburke)\n* [Webpack](http://webpack.github.io/): [ng-annotate-webpack-plugin](https://www.npmjs.org/package/ng-annotate-webpack-plugin) by [Chris Liechty](https://github.com/cliechty), [ng-annotate-loader](https://www.npmjs.org/package/ng-annotate-loader) by [Andrey Skladchikov](https://github.com/huston007)\n* [Middleman](http://middlemanapp.com/): [middleman-ngannotate](http://rubygems.org/gems/middleman-ngannotate) by [Michael Siebert](https://github.com/siebertm)\n* [ENB](http://enb-make.info/) (Russian): [enb-ng-techs](https://www.npmjs.org/package/enb-ng-techs#ng-annotate) by [Alexey Gurianov](https://github.com/guria)\n\n\n## Changes\nSee [CHANGES.md](CHANGES.md).\n\n\n## Build and test\nng-annotate is written in ES6 constlet style and uses [defs.js](https://github.com/olov/defs)\nto transpile to ES5. See [BUILD.md](BUILD.md) for build and test instructions.\n\n\n## Issues and contributions\nPlease provide issues in the form of input, expected output, actual output. Include \nthe version of ng-annotate and node that you are using. With pull requests, please \ninclude changes to the tests as well (tests/original.js, tests/with_annotations.js).\n\n\n## License\n`MIT`, see [LICENSE](LICENSE) file.\n\nng-annotate is written by [Olov Lassus](https://github.com/olov) with the kind help by\n[contributors](https://github.com/olov/ng-annotate/graphs/contributors).\n[Follow @olov](https://twitter.com/olov) on Twitter for updates about ng-annotate.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/olov/ng-annotate/issues"
  },
  "_id": "ng-annotate@1.2.1",
  "dist": {
    "shasum": "27617d05fc42f25d24653d0d59cbc58db56b521f"
  },
  "_from": "ng-annotate@^1.2.1",
  "_resolved": "https://registry.npm.taobao.org/ng-annotate/download/ng-annotate-1.2.1.tgz"
}
